{"ast":null,"code":"/*! @azure/msal-browser v2.24.0 2022-05-02 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceEvents, Constants } from '@azure/msal-common';\nimport { DEFAULT_REQUEST, InteractionType, ApiId } from '../utils/BrowserConstants.js';\nimport { ClientApplication } from './ClientApplication.js';\nimport { EventType } from '../event/EventType.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { NativeAuthError } from '../error/NativeAuthError.js';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\r\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\r\n */\n\nvar PublicClientApplication =\n/** @class */\nfunction (_super) {\n  __extends(PublicClientApplication, _super);\n  /**\r\n   * @constructor\r\n   * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\r\n   *\r\n   * Important attributes in the Configuration object for auth are:\r\n   * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\r\n   * - authority: the authority URL for your application.\r\n   * - redirect_uri: the uri of your application registered in the portal.\r\n   *\r\n   * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\r\n   * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\r\n   * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\r\n   * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\r\n   * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\r\n   * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\r\n   *\r\n   * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\r\n   * Full B2C functionality will be available in this library in future versions.\r\n   *\r\n   * @param configuration object for the MSAL PublicClientApplication instance\r\n   */\n\n\n  function PublicClientApplication(configuration) {\n    var _this = _super.call(this, configuration) || this;\n\n    _this.activeSilentTokenRequests = new Map();\n    return _this;\n  }\n  /**\r\n   * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\r\n   * any code that follows this function will not execute.\r\n   *\r\n   * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\r\n   * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\r\n   *\r\n   * @param request\r\n   */\n\n\n  PublicClientApplication.prototype.loginRedirect = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId;\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        this.logger.verbose(\"loginRedirect called\", correlationId);\n        return [2\n        /*return*/\n        , this.acquireTokenRedirect(__assign({\n          correlationId: correlationId\n        }, request || DEFAULT_REQUEST))];\n      });\n    });\n  };\n  /**\r\n   * Use when initiating the login process via opening a popup window in the user's browser\r\n   *\r\n   * @param request\r\n   *\r\n   * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\r\n   */\n\n\n  PublicClientApplication.prototype.loginPopup = function (request) {\n    var correlationId = this.getRequestCorrelationId(request);\n    this.logger.verbose(\"loginPopup called\", correlationId);\n    return this.acquireTokenPopup(__assign({\n      correlationId: correlationId\n    }, request || DEFAULT_REQUEST));\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\r\n   *\r\n   * @param {@link (SilentRequest:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilent = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        correlationId = this.getRequestCorrelationId(request);\n        atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);\n        this.preflightBrowserEnvironmentCheck(InteractionType.Silent);\n        this.logger.verbose(\"acquireTokenSilent called\", correlationId);\n        account = request.account || this.getActiveAccount();\n\n        if (!account) {\n          throw BrowserAuthError.createNoAccountError();\n        }\n\n        thumbprint = {\n          clientId: this.config.auth.clientId,\n          authority: request.authority || Constants.EMPTY_STRING,\n          scopes: request.scopes,\n          homeAccountIdentifier: account.homeAccountId,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        silentRequestKey = JSON.stringify(thumbprint);\n        cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);\n\n        if (typeof cachedResponse === \"undefined\") {\n          this.logger.verbose(\"acquireTokenSilent called for the first time, storing active request\", correlationId);\n          response = this.acquireTokenSilentAsync(__assign(__assign({}, request), {\n            correlationId: correlationId\n          }), account).then(function (result) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              success: true,\n              fromCache: result.fromCache\n            });\n            atsMeasurement.flushMeasurement();\n            return result;\n          }).catch(function (error) {\n            _this.activeSilentTokenRequests.delete(silentRequestKey);\n\n            atsMeasurement.endMeasurement({\n              success: false\n            });\n            atsMeasurement.flushMeasurement();\n            throw error;\n          });\n          this.activeSilentTokenRequests.set(silentRequestKey, response);\n          return [2\n          /*return*/\n          , response];\n        } else {\n          this.logger.verbose(\"acquireTokenSilent has been called previously, returning the result from the first call\", correlationId);\n          atsMeasurement.endMeasurement({\n            success: true\n          }); // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics\n\n          atsMeasurement.discardMeasurement();\n          return [2\n          /*return*/\n          , cachedResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.\r\n   * @param {@link (SilentRequest:type)}\r\n   * @param {@link (AccountInfo:type)}\r\n   * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}\r\n   */\n\n\n  PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {\n    return __awaiter(this, void 0, void 0, function () {\n      var astsAsyncMeasurement, result, silentRequest, silentCacheClient, silentRequest_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n            astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);\n            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3\n            /*break*/\n            , 1];\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from native platform\");\n            silentRequest = __assign(__assign({}, request), {\n              account: account\n            });\n            result = this.acquireTokenNative(silentRequest, ApiId.acquireTokenSilent_silentFlow).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var silentIframeClient;\n                return __generator(this, function (_a) {\n                  // If native token acquisition fails for availability reasons fallback to web flow\n                  if (e instanceof NativeAuthError && e.isFatal()) {\n                    this.logger.verbose(\"acquireTokenSilent - native platform unavailable, falling back to web flow\");\n                    this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt \n\n                    silentIframeClient = this.createSilentIframeClient(request.correlationId);\n                    return [2\n                    /*return*/\n                    , silentIframeClient.acquireToken(request)];\n                  }\n\n                  throw e;\n                });\n              });\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            this.logger.verbose(\"acquireTokenSilent - attempting to acquire token from web flow\");\n            silentCacheClient = this.createSilentCacheClient(request.correlationId);\n            return [4\n            /*yield*/\n            , silentCacheClient.initializeSilentRequest(request, account)];\n\n          case 2:\n            silentRequest_1 = _a.sent();\n            result = silentCacheClient.acquireToken(silentRequest_1).catch(function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2\n                  /*return*/\n                  , this.acquireTokenByRefreshToken(silentRequest_1)];\n                });\n              });\n            });\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , result.then(function (response) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, response);\n\n              astsAsyncMeasurement.endMeasurement({\n                success: true,\n                fromCache: response.fromCache\n              });\n              return response;\n            }).catch(function (tokenRenewalError) {\n              _this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, tokenRenewalError);\n\n              astsAsyncMeasurement.endMeasurement({\n                success: false\n              });\n              throw tokenRenewalError;\n            })];\n        }\n      });\n    });\n  };\n\n  return PublicClientApplication;\n}(ClientApplication);\n\nexport { PublicClientApplication }; //# sourceMappingURL=PublicClientApplication.js.map","map":null,"metadata":{},"sourceType":"module"}