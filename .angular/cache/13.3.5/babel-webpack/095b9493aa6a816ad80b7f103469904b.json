{"ast":null,"code":"/*! @azure/msal-common v6.3.0 2022-05-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\n\nvar BaseClient =\n/** @class */\nfunction () {\n  function BaseClient(configuration) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration); // Initialize the logger\n\n    this.logger = new Logger(this.config.loggerOptions, name, version); // Initialize crypto\n\n    this.cryptoUtils = this.config.cryptoInterface; // Initialize storage interface\n\n    this.cacheManager = this.config.storageInterface; // Set the network interface\n\n    this.networkClient = this.config.networkInterface; // Set the NetworkManager\n\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager); // Set TelemetryManager\n\n    this.serverTelemetryManager = this.config.serverTelemetryManager; // set Authority\n\n    this.authority = this.config.authOptions.authority;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n\n\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n\n          break;\n\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n\n\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers,\n              proxyUrl: this.config.systemOptions.proxyUrl\n            })];\n\n          case 1:\n            response = _a.sent();\n\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n\n\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n\n    this.authority = updatedAuthority;\n  };\n\n  return BaseClient;\n}();\n\nexport { BaseClient }; //# sourceMappingURL=BaseClient.js.map","map":null,"metadata":{},"sourceType":"module"}