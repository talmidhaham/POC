{"ast":null,"code":"/*! @azure/msal-common v6.3.0 2022-05-02 */\n'use strict';\n\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * JWT Token representation class. Parses token string and generates claims object.\r\n */\n\nvar AuthToken =\n/** @class */\nfunction () {\n  function AuthToken(rawToken, crypto) {\n    if (StringUtils.isEmpty(rawToken)) {\n      throw ClientAuthError.createTokenNullOrEmptyError(rawToken);\n    }\n\n    this.rawToken = rawToken;\n    this.claims = AuthToken.extractTokenClaims(rawToken, crypto);\n  }\n  /**\r\n   * Extract token by decoding the rawToken\r\n   *\r\n   * @param encodedToken\r\n   */\n\n\n  AuthToken.extractTokenClaims = function (encodedToken, crypto) {\n    var decodedToken = StringUtils.decodeAuthToken(encodedToken); // token will be decoded to get the username\n\n    try {\n      var base64TokenPayload = decodedToken.JWSPayload; // base64Decode() should throw an error if there is an issue\n\n      var base64Decoded = crypto.base64Decode(base64TokenPayload);\n      return JSON.parse(base64Decoded);\n    } catch (err) {\n      throw ClientAuthError.createTokenParsingError(err);\n    }\n  };\n\n  return AuthToken;\n}();\n\nexport { AuthToken }; //# sourceMappingURL=AuthToken.js.map","map":null,"metadata":{},"sourceType":"module"}