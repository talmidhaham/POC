{"ast":null,"code":"/*! @azure/msal-browser v2.24.0 2022-05-02 */\n'use strict';\n\nimport { Authority, IdTokenEntity, AuthToken, AccountEntity, ScopeSet, AccessTokenEntity } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Token cache manager\r\n */\n\nvar TokenCache =\n/** @class */\nfunction () {\n  function TokenCache(configuration, storage, logger, cryptoObj) {\n    this.isBrowserEnvironment = typeof window !== \"undefined\";\n    this.config = configuration;\n    this.storage = storage;\n    this.logger = logger;\n    this.cryptoObj = cryptoObj;\n  } // Move getAllAccounts here and cache utility APIs\n\n  /**\r\n   * API to load tokens to msal-browser cache.\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadExternalTokens = function (request, response, options) {\n    this.logger.info(\"TokenCache - loadExternalTokens called\");\n\n    if (!response.id_token) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes id token.\");\n    }\n\n    if (request.account) {\n      this.loadIdToken(response.id_token, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n      this.loadAccessToken(request, response, request.account.homeAccountId, request.account.environment, request.account.tenantId, options);\n    } else if (request.authority) {\n      var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);\n      var authorityOptions = {\n        protocolMode: this.config.auth.protocolMode,\n        knownAuthorities: this.config.auth.knownAuthorities,\n        cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,\n        authorityMetadata: this.config.auth.authorityMetadata\n      };\n      var authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions); // \"clientInfo\" from options takes precedence over \"clientInfo\" in response\n\n      if (options.clientInfo) {\n        this.logger.trace(\"TokenCache - homeAccountId from options\");\n        this.loadIdToken(response.id_token, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, options.clientInfo, authority.hostnameAndPort, authority.tenant, options);\n      } else if (response.client_info) {\n        this.logger.trace(\"TokenCache - homeAccountId from response\");\n        this.loadIdToken(response.id_token, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n        this.loadAccessToken(request, response, response.client_info, authority.hostnameAndPort, authority.tenant, options);\n      } else {\n        throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide clientInfo in the response or options.\");\n      }\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide a request with an account or a request with authority.\");\n    }\n  };\n  /**\r\n   * Helper function to load id tokens to msal-browser cache\r\n   * @param idToken\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @param options\r\n   */\n\n\n  TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId, options) {\n    var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken, this.config.auth.clientId, tenantId);\n    var idAuthToken = new AuthToken(idToken, this.cryptoObj);\n    var accountEntity = options.clientInfo ? AccountEntity.createAccount(options.clientInfo, homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment) : AccountEntity.createGenericAccount(homeAccountId, idAuthToken, undefined, undefined, undefined, undefined, environment);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading id token\");\n      this.storage.setAccount(accountEntity);\n      this.storage.setIdTokenCredential(idTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n  /**\r\n   * Helper function to load access tokens to msal-browser cache\r\n   * @param request\r\n   * @param response\r\n   * @param options\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param tenantId\r\n   * @returns\r\n   */\n\n\n  TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {\n    if (!response.access_token) {\n      this.logger.verbose(\"TokenCache - No access token provided for caching\");\n      return;\n    }\n\n    if (!response.expires_in) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please ensure server response includes expires_in value.\");\n    }\n\n    if (!options.extendedExpiresOn) {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"Please provide an extendedExpiresOn value in the options.\");\n    }\n\n    var scopes = new ScopeSet(request.scopes).printScopes();\n    var expiresOn = response.expires_in;\n    var extendedExpiresOn = options.extendedExpiresOn;\n    var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);\n\n    if (this.isBrowserEnvironment) {\n      this.logger.verbose(\"TokenCache - loading access token\");\n      this.storage.setAccessTokenCredential(accessTokenEntity);\n    } else {\n      throw BrowserAuthError.createUnableToLoadTokenError(\"loadExternalTokens is designed to work in browser environments only.\");\n    }\n  };\n\n  return TokenCache;\n}();\n\nexport { TokenCache }; //# sourceMappingURL=TokenCache.js.map","map":null,"metadata":{},"sourceType":"module"}