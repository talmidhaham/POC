{"ast":null,"code":"/*! @azure/msal-browser v2.24.0 2022-05-02 */\n'use strict';\n\nimport { OIDC_DEFAULT_SCOPES } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Constants\r\n */\n\nvar BrowserConstants = {\n  /**\r\n   * Interaction in progress cache value\r\n   */\n  INTERACTION_IN_PROGRESS_VALUE: \"interaction_in_progress\",\n\n  /**\r\n   * Invalid grant error code\r\n   */\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n\n  /**\r\n   * Default popup window width\r\n   */\n  POPUP_WIDTH: 483,\n\n  /**\r\n   * Default popup window height\r\n   */\n  POPUP_HEIGHT: 600,\n\n  /**\r\n   * Name of the popup window starts with\r\n   */\n  POPUP_NAME_PREFIX: \"msal\",\n\n  /**\r\n   * Default popup monitor poll interval in milliseconds\r\n   */\n  POLL_INTERVAL_MS: 50,\n\n  /**\r\n   * Msal-browser SKU\r\n   */\n  MSAL_SKU: \"msal.js.browser\"\n};\nvar NativeConstants = {\n  CHANNEL_ID: \"53ee284d-920a-4b59-9d30-a60315b26836\",\n  PREFERRED_EXTENSION_ID: \"ppnbnpeolgkicgegkbkbjmhlideopiji\"\n};\nvar NativeExtensionMethod = /*#__PURE__*/(function () {\n  (function (NativeExtensionMethod) {\n    NativeExtensionMethod[\"HandshakeRequest\"] = \"Handshake\";\n    NativeExtensionMethod[\"HandshakeResponse\"] = \"HandshakeResponse\";\n    NativeExtensionMethod[\"GetToken\"] = \"GetToken\";\n    NativeExtensionMethod[\"Response\"] = \"Response\";\n  })(NativeExtensionMethod || (NativeExtensionMethod = {}));\n\n  return NativeExtensionMethod;\n})();\nvar BrowserCacheLocation = /*#__PURE__*/(function () {\n  (function (BrowserCacheLocation) {\n    BrowserCacheLocation[\"LocalStorage\"] = \"localStorage\";\n    BrowserCacheLocation[\"SessionStorage\"] = \"sessionStorage\";\n    BrowserCacheLocation[\"MemoryStorage\"] = \"memoryStorage\";\n  })(BrowserCacheLocation || (BrowserCacheLocation = {}));\n\n  return BrowserCacheLocation;\n})();\n\n/**\r\n * HTTP Request types supported by MSAL.\r\n */\nvar HTTP_REQUEST_TYPE = /*#__PURE__*/(function () {\n  (function (HTTP_REQUEST_TYPE) {\n    HTTP_REQUEST_TYPE[\"GET\"] = \"GET\";\n    HTTP_REQUEST_TYPE[\"POST\"] = \"POST\";\n  })(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));\n\n  return HTTP_REQUEST_TYPE;\n})();\n\n/**\r\n * Temporary cache keys for MSAL, deleted after any request.\r\n */\nvar TemporaryCacheKeys = /*#__PURE__*/(function () {\n  (function (TemporaryCacheKeys) {\n    TemporaryCacheKeys[\"AUTHORITY\"] = \"authority\";\n    TemporaryCacheKeys[\"ACQUIRE_TOKEN_ACCOUNT\"] = \"acquireToken.account\";\n    TemporaryCacheKeys[\"SESSION_STATE\"] = \"session.state\";\n    TemporaryCacheKeys[\"REQUEST_STATE\"] = \"request.state\";\n    TemporaryCacheKeys[\"NONCE_IDTOKEN\"] = \"nonce.id_token\";\n    TemporaryCacheKeys[\"ORIGIN_URI\"] = \"request.origin\";\n    TemporaryCacheKeys[\"RENEW_STATUS\"] = \"token.renew.status\";\n    TemporaryCacheKeys[\"URL_HASH\"] = \"urlHash\";\n    TemporaryCacheKeys[\"REQUEST_PARAMS\"] = \"request.params\";\n    TemporaryCacheKeys[\"SCOPES\"] = \"scopes\";\n    TemporaryCacheKeys[\"INTERACTION_STATUS_KEY\"] = \"interaction.status\";\n    TemporaryCacheKeys[\"CCS_CREDENTIAL\"] = \"ccs.credential\";\n    TemporaryCacheKeys[\"CORRELATION_ID\"] = \"request.correlationId\";\n    TemporaryCacheKeys[\"NATIVE_REQUEST\"] = \"request.native\";\n  })(TemporaryCacheKeys || (TemporaryCacheKeys = {}));\n\n  return TemporaryCacheKeys;\n})();\n\n/**\r\n * Cache keys stored in-memory\r\n */\nvar InMemoryCacheKeys = /*#__PURE__*/(function () {\n  (function (InMemoryCacheKeys) {\n    InMemoryCacheKeys[\"WRAPPER_SKU\"] = \"wrapper.sku\";\n    InMemoryCacheKeys[\"WRAPPER_VER\"] = \"wrapper.version\";\n  })(InMemoryCacheKeys || (InMemoryCacheKeys = {}));\n\n  return InMemoryCacheKeys;\n})();\n\n/**\r\n * API Codes for Telemetry purposes.\r\n * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs\r\n * 0-99 Silent Flow\r\n * 800-899 Auth Code Flow\r\n */\nvar ApiId = /*#__PURE__*/(function () {\n  (function (ApiId) {\n    ApiId[ApiId[\"acquireTokenRedirect\"] = 861] = \"acquireTokenRedirect\";\n    ApiId[ApiId[\"acquireTokenPopup\"] = 862] = \"acquireTokenPopup\";\n    ApiId[ApiId[\"ssoSilent\"] = 863] = \"ssoSilent\";\n    ApiId[ApiId[\"acquireTokenSilent_authCode\"] = 864] = \"acquireTokenSilent_authCode\";\n    ApiId[ApiId[\"handleRedirectPromise\"] = 865] = \"handleRedirectPromise\";\n    ApiId[ApiId[\"acquireTokenByCode\"] = 866] = \"acquireTokenByCode\";\n    ApiId[ApiId[\"acquireTokenSilent_silentFlow\"] = 61] = \"acquireTokenSilent_silentFlow\";\n    ApiId[ApiId[\"logout\"] = 961] = \"logout\";\n    ApiId[ApiId[\"logoutPopup\"] = 962] = \"logoutPopup\";\n  })(ApiId || (ApiId = {}));\n\n  return ApiId;\n})();\n\n/*\r\n * Interaction type of the API - used for state and telemetry\r\n */\nvar InteractionType = /*#__PURE__*/(function () {\n  (function (InteractionType) {\n    InteractionType[\"Redirect\"] = \"redirect\";\n    InteractionType[\"Popup\"] = \"popup\";\n    InteractionType[\"Silent\"] = \"silent\";\n    InteractionType[\"None\"] = \"none\";\n  })(InteractionType || (InteractionType = {}));\n\n  return InteractionType;\n})();\n\n/**\r\n * Types of interaction currently in progress.\r\n * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.\r\n */\nvar InteractionStatus = /*#__PURE__*/(function () {\n  (function (InteractionStatus) {\n    /**\r\n     * Initial status before interaction occurs\r\n     */\n    InteractionStatus[\"Startup\"] = \"startup\";\n    /**\r\n     * Status set when all login calls occuring\r\n     */\n\n    InteractionStatus[\"Login\"] = \"login\";\n    /**\r\n     * Status set when logout call occuring\r\n     */\n\n    InteractionStatus[\"Logout\"] = \"logout\";\n    /**\r\n     * Status set for acquireToken calls\r\n     */\n\n    InteractionStatus[\"AcquireToken\"] = \"acquireToken\";\n    /**\r\n     * Status set for ssoSilent calls\r\n     */\n\n    InteractionStatus[\"SsoSilent\"] = \"ssoSilent\";\n    /**\r\n     * Status set when handleRedirect in progress\r\n     */\n\n    InteractionStatus[\"HandleRedirect\"] = \"handleRedirect\";\n    /**\r\n     * Status set when interaction is complete\r\n     */\n\n    InteractionStatus[\"None\"] = \"none\";\n  })(InteractionStatus || (InteractionStatus = {}));\n\n  return InteractionStatus;\n})();\nvar DEFAULT_REQUEST = {\n  scopes: OIDC_DEFAULT_SCOPES\n};\n/**\r\n * JWK Key Format string (Type MUST be defined for window crypto APIs)\r\n */\n\nvar KEY_FORMAT_JWK = \"jwk\"; // Supported wrapper SKUs\n\nvar WrapperSKU = /*#__PURE__*/(function () {\n  (function (WrapperSKU) {\n    WrapperSKU[\"React\"] = \"@azure/msal-react\";\n    WrapperSKU[\"Angular\"] = \"@azure/msal-angular\";\n  })(WrapperSKU || (WrapperSKU = {}));\n\n  return WrapperSKU;\n})();\n// DatabaseStorage Constants\nvar DB_NAME = \"msal.db\";\nvar DB_VERSION = 1;\nvar DB_TABLE_NAME = DB_NAME + \".keys\";\nexport { ApiId, BrowserCacheLocation, BrowserConstants, DB_NAME, DB_TABLE_NAME, DB_VERSION, DEFAULT_REQUEST, HTTP_REQUEST_TYPE, InMemoryCacheKeys, InteractionStatus, InteractionType, KEY_FORMAT_JWK, NativeConstants, NativeExtensionMethod, TemporaryCacheKeys, WrapperSKU }; //# sourceMappingURL=BrowserConstants.js.map","map":null,"metadata":{},"sourceType":"module"}