{"ast":null,"code":"/*! @azure/msal-browser v2.24.0 2022-05-02 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, ServerError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError, BrowserAuthErrorMessage } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler =\n/** @class */\nfunction () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse;\n      return __generator(this, function (_a) {\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n        if (StringUtils.isEmpty(locationHash)) {\n          throw BrowserAuthError.createEmptyHashError(locationHash);\n        }\n\n        stateKey = this.browserStorage.generateStateKey(state);\n        requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n        if (!requestState) {\n          throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n        }\n\n        try {\n          authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n        } catch (e) {\n          if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {\n            // Translate server error caused by user closing native prompt to corresponding first class MSAL error\n            throw BrowserAuthError.createUserCancelledError();\n          } else {\n            throw e;\n          }\n        }\n\n        return [2\n        /*return*/\n        , this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];\n      });\n    });\n  };\n  /**\r\n   * Process auth code response from AAD\r\n   * @param authCodeResponse\r\n   * @param state\r\n   * @param authority\r\n   * @param networkModule\r\n   * @returns\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {\n    if (validateNonce === void 0) {\n      validateNonce = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.trace(\"InteractionHandler.handleCodeResponseFromServer called\");\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)\n            if (validateNonce) {\n              authCodeResponse.nonce = cachedNonce || undefined;\n            }\n\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler }; //# sourceMappingURL=InteractionHandler.js.map","map":null,"metadata":{},"sourceType":"module"}