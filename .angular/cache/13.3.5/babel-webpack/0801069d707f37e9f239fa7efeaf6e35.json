{"ast":null,"code":"/*! @azure/msal-browser v2.24.0 2022-05-02 */\n'use strict';\n\nimport { __extends, __assign } from '../_virtual/_tslib.js';\nimport { PerformanceClient } from '@azure/msal-common';\nimport { BrowserCrypto } from '../crypto/BrowserCrypto.js';\nimport { GuidGenerator } from '../crypto/GuidGenerator.js';\nimport { BrowserPerformanceMeasurement } from './BrowserPerformanceMeasurement.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserPerformanceClient =\n/** @class */\nfunction (_super) {\n  __extends(BrowserPerformanceClient, _super);\n\n  function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {\n    var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;\n\n    _this.browserCrypto = new BrowserCrypto(_this.logger);\n    _this.guidGenerator = new GuidGenerator(_this.browserCrypto);\n    return _this;\n  }\n\n  BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {\n    return new BrowserPerformanceMeasurement(measureName, correlationId);\n  };\n\n  BrowserPerformanceClient.prototype.generateId = function () {\n    return this.guidGenerator.generateGuid();\n  };\n\n  BrowserPerformanceClient.prototype.getPageVisibility = function () {\n    var _a;\n\n    return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;\n  };\n  /**\r\n   * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.\r\n   * Also captures browser page visibilityState.\r\n   *\r\n   * @param {PerformanceEvents} measureName\r\n   * @param {?string} [correlationId]\r\n   * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}\r\n   */\n\n\n  BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {\n    var _this = this; // Capture page visibilityState and then invoke start/end measurement\n\n\n    var startPageVisibility = this.getPageVisibility();\n\n    var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);\n\n    return __assign(__assign({}, inProgressEvent), {\n      endMeasurement: function endMeasurement(event) {\n        return inProgressEvent.endMeasurement(__assign({\n          startPageVisibility: startPageVisibility,\n          endPageVisibility: _this.getPageVisibility()\n        }, event));\n      }\n    });\n  };\n\n  return BrowserPerformanceClient;\n}(PerformanceClient);\n\nexport { BrowserPerformanceClient }; //# sourceMappingURL=BrowserPerformanceClient.js.map","map":null,"metadata":{},"sourceType":"module"}