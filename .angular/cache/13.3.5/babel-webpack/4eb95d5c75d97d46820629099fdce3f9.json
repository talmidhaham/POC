{"ast":null,"code":"/*! @azure/msal-common v6.3.0 2022-05-02 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialEntity } from './CredentialEntity.js';\nimport { CredentialType } from '../../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * REFRESH_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--\r\n *\r\n * Value:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, '1' represents Microsoft Family\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n * }\r\n */\n\nvar RefreshTokenEntity =\n/** @class */\nfunction (_super) {\n  __extends(RefreshTokenEntity, _super);\n\n  function RefreshTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create RefreshTokenEntity\r\n   * @param homeAccountId\r\n   * @param authenticationResult\r\n   * @param clientId\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, oboAssertion) {\n    var rtEntity = new RefreshTokenEntity();\n    rtEntity.clientId = clientId;\n    rtEntity.credentialType = CredentialType.REFRESH_TOKEN;\n    rtEntity.environment = environment;\n    rtEntity.homeAccountId = homeAccountId;\n    rtEntity.secret = refreshToken;\n    rtEntity.oboAssertion = oboAssertion;\n    if (familyId) rtEntity.familyId = familyId;\n    return rtEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  RefreshTokenEntity.isRefreshTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN;\n  };\n\n  return RefreshTokenEntity;\n}(CredentialEntity);\n\nexport { RefreshTokenEntity }; //# sourceMappingURL=RefreshTokenEntity.js.map","map":null,"metadata":{},"sourceType":"module"}